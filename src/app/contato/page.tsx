'use client'; // Esse componente deve ser renderizado no lado do cliente (navegador), n√£o no servidor

import { useState } from 'react'; // Hook do React para criar e atualizar estados
import topics from '../../data/topics'; // Importa os t√≥picos (dados de ajuda/suporte) a serem exibidos
import Form from '../../components/layout/form'; // Importa o formul√°rio de atendimento

// Define o tipo de dado para um t√≥pico (ajuda o TypeScript a identificar os campos que cada t√≥pico deve ter)
type Topic = {
  title: string; // T√≠tulo do t√≥pico (ex: "Pagamento", "Entrega")
  description: string; // Pequena descri√ß√£o do t√≥pico
  content?: string[]; // Texto com mais detalhes (opcional), geralmente em forma de par√°grafos
};

const AtendimentoPage = () => {
  // Estado para armazenar o t√≥pico que o usu√°rio selecionou (ou null se nenhum foi clicado)
  const [selectedTopic, setSelectedTopic] = useState<string | null>(null);

  return (
    <main className="min-h-screen bg-gray-100 py-10">
      <div className="max-w-7xl mx-auto px-6">
        {/* T√≠tulo e frase de destaque da p√°gina */}
        <div className="text-center mb-10">
          <h1 className="text-3xl font-bold text-[#359293]">
            Aqui tem tudo sobre a Kavita! üåø
          </h1>
          <p className="text-xl text-gray-600">L√≠der em pre√ßo e qualidade</p>
        </div>

        {/* Se nenhum t√≥pico foi selecionado, exibe os cards com os t√≥picos */}
        {!selectedTopic && (
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-10">
            {topics.map((topic: Topic) => (
              <div
                key={topic.title}
                className="bg-white shadow-md rounded-lg p-6 text-center hover:shadow-lg hover:scale-105 transition cursor-pointer"
                onClick={() => setSelectedTopic(topic.title)} // Quando clicar no card, define o t√≥pico como selecionado
              >
                <h2 className="text-lg font-semibold text-[#359293]">{topic.title}</h2>
                <p className="text-sm text-gray-600 mt-2">{topic.description}</p>
              </div>
            ))}
          </div>
        )}

        {/* Se um t√≥pico foi selecionado, mostra seu conte√∫do detalhado */}
        {selectedTopic && (
          <div className="bg-white shadow-md rounded-lg p-6">
            {/* Bot√£o para voltar para a lista de t√≥picos */}
            <button
              onClick={() => setSelectedTopic(null)} // Reseta o estado para voltar √† tela anterior
              className="mb-4 text-[#EC5B20] hover:underline"
            >
              ‚Üê Voltar
            </button>

            {/* T√≠tulo do t√≥pico selecionado */}
            <h2 className="text-2xl font-bold text-[#359293] mb-4">{selectedTopic}</h2>

            {/* Conte√∫do do t√≥pico, se existir */}
            <div className="text-gray-700 space-y-4">
              {
                // Procura o t√≥pico selecionado no array de t√≥picos e mostra seu conte√∫do (par√°grafos)
                topics
                  .find((topic) => topic.title === selectedTopic)
                  ?.content?.map((paragraph, index) => (
                    <p key={index} className="text-gray-700">
                      {paragraph}
                    </p>
                  )) || <p>Informa√ß√µes n√£o dispon√≠veis.</p> // Se n√£o houver conte√∫do, mostra uma mensagem alternativa
              }
            </div>
          </div>
        )}

        {/* Se nenhum t√≥pico estiver selecionado, mostra o formul√°rio de contato */}
        {!selectedTopic && <Form />}
      </div>
    </main>
  );
};

export default AtendimentoPage;
// Exporta o componente para ser usado na aplica√ß√£o
// O componente √© a p√°gina de atendimento ao cliente, onde os usu√°rios podem ver t√≥picos de ajuda e enviar mensagens
// Ele usa o estado para controlar qual t√≥pico est√° sendo visualizado e renderiza os dados dinamicamente
// A p√°gina √© responsiva e se adapta a diferentes tamanhos de tela, usando classes do Tailwind CSS
// O formul√°rio de contato √© exibido na parte inferior da p√°gina, permitindo que os usu√°rios enviem mensagens
// A estrutura do c√≥digo √© organizada para facilitar a leitura e manuten√ß√£o, seguindo boas pr√°ticas de desenvolvimento